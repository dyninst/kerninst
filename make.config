# Paradyn overall build configuration (unix)
#
# $Id: make.config,v 1.39 2005/04/13 22:11:55 mjbrim Exp $
#

SUITE_NAME	= KernInst
RELEASE_NUM	= 2.1.1
#BUILD_MARK	=

# Include any per-user configuration changes; this "local" config file
# should *not* be under CVS control, so that it never gets committed.

-include $(TO_CORE)/make.config.local

# Choose between gcc or sun pro compilers; the settings will affect
# things such as which warning flags to use.  Nothing too earth-shattering.

ifdef USE_GCC
FOUND_COMPILER_TYPE = true
endif
ifdef USE_SUNWORKSHOP
FOUND_COMPILER_TYPE = true
endif

ifndef FOUND_COMPILER_TYPE
#USE_SUNWORKSHOP = true
USE_GCC = true
endif

ifdef USE_GCC
CC  = gcc
CXX = g++
GEN_DEPENDENCY_FLAG = -MM
endif
ifdef USE_SUNWORKSHOP
CC  = cc
CXX = CC
GEN_DEPENDENCY_FLAG = -xM1
endif

# Apart from actual "full" releases, don't modify these build Id components.
# For personal/experimental builds, feel free to use your core/make.config.local
# file to (re-)define BUILD_MARK as you desire.

# ***** IMPORTANT INSTALLATION/CONFIGURATION INSTRUCTIONS *****
# Unless your site is set-up identically to that of the Paradyn/DyninstAPI
# developers, you should carefully examine the (GNU)make configuration
# parameters defined in this file, particularly utilities such as the C/C++
# compilers, perl, flex and bison, and the installed locations and names
# for FLEX, TCL/TK, X11 and PVM (which is optional).

ifeq ($(PLATFORM),sparc-sun-solaris2.4)
SPARC_SOLARIS = true
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.5)
SPARC_SOLARIS = true
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.5.1)
SPARC_SOLARIS = true
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.6)
SPARC_SOLARIS = true
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.7)
SPARC_SOLARIS = true
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.8)
SPARC_SOLARIS = true
endif

ifeq ($(PLATFORM),i386-unknown-linux2.0)
I386_LINUX = true
endif
ifeq ($(PLATFORM),i386-unknown-linux2.2)
I386_LINUX = true
endif
ifeq ($(PLATFORM),i386-unknown-linux2.4)
I386_LINUX = true
endif
ifeq ($(PLATFORM),i386-unknown-linux2.6)
I386_LINUX = true
endif

# most "main" modules are only two levels deep, but we need to be able to
# change this for those that are deeper in the tree
ifndef TO_CORE
TO_CORE		= ../..
endif

# shared files from paradyn are in TO_CORE/core, which should be
# checked out from paradyn's cvs
TO_PD_CORE	= $(TO_CORE)/core

# Destinations for library and executable installation (relative to core!)
# Warning: modification of the build/install structure is not recommended!
LIBRARY_DEST	= ../$(PLATFORM)/lib
PROGRAM_DEST	= ../$(PLATFORM)/bin

# Usually, we look for files, binaries, libs in $(TO_CORE)/....<something>.
# But if the file doesn't exist there (i.e. if the user hasn't checked them out
# with cvs), then we should look in a backup location.  That's what this vrble
# is about.  It's used several times below in this file.
BACKUP_CORE = /p/paradyn/builds/core

LEX		= flex
RANLIB		= ranlib
AR		= ar
YFLAGS		= -d -y
YACC		= bison
MV		= mv
CP		= cp
RM		= rm -f
MKDIR		= mkdir -p
PERL		= perl		# NB: perl v5 or higher required!

# COLLECTOR is only used by purify & quantify
#COLLECTOR	= /local.cayenne/egcs/install/lib/gcc-lib/sparc-sun-solaris2.5.1/egcs-2.91.41/ld
COLLECTOR	= /local.cayenne/egcs/install/bin/ld


# BUILDSTAMP is used to generate local build vouchers
BUILDSTAMP	= $(TO_CORE)/scripts/buildstamp

ifdef PLATFORM
ARCH_DEF	= -D$(shell echo $$PLATFORM | $(PERL) -pe 's/\./_/g;s/-/_/g')
else
BUILDERROR: PLATFORM must be defined in environment to build (and run) Paradyn
endif

## temporary override
#ifeq ($(PLATFORM),sparc-sun-solaris2.6)
#PLATFORM	= sparc-sun-solaris2.4
#ARCH_DEF	= -Dsparc_sun_solaris2_4
#RESET_PF	= true
#endif

ifdef CROSSCOMPILER
AS              = /p/sp2/gcc/bin/rs6000-gcc
CC              = /p/sp2/gcc/bin/rs6000-gcc
CXX             = /p/sp2/gcc/bin/rs6000-gcc
AR		= /p/sp2/gcc/rs6000/bin/ar
RANLIB		= /p/sp2/gcc/rs6000/bin/ranlib
endif

ifdef SPARC_SOLARIS
AS		= /usr/ccs/bin/as
RANLIB		= true
endif
ifeq ($(PLATFORM),i386-unknown-solaris2.5)
AS		= /usr/ccs/bin/as
RANLIB		= true
endif

ifdef I386_LINUX
AS              = /usr/bin/as
RANLIB          = true
ifeq ($(PLATFORM),i386-unknown-linux2.6)
ARCH_DEF	= -Di386_unknown_linux2_4 -Di386_unknown_linux2_6
endif
endif


# Default module compiler; modules which want $(CC) should redefine
# this, **NOT** CC

MODCC		= $(CXX)
MODCFLAGS	= $(CXXFLAGS)

.SUFFIXES:	.I

IFLAGS          = -I. -I$(TO_CORE)

ASFLAGS         = -P $(ARCH_DEF)

ifeq ($(CVSROOT),/p/paradyn/CVSROOT)
DEVELOPER=true
endif
ifeq ($(CVSROOT),/fs/mashie2/hollings/CVSROOT)
DEVELOPER=true
endif

ifdef USE_GCC
BASICWARNINGS	= -W -Wall

COMMONWARNINGS	= -W -Wall -Wshadow -Wpointer-arith       \
		-Wcast-qual -Wcast-align            \
		-Wconversion \
		-Wmissing-prototypes \
		-Wredundant-decls -Woverloaded-virtual

# not as strict as above, but can actually be used -- mdc
USEFULWARNINGS	= -W -Wall -Wpointer-arith       \
		-Wcast-qual -Wcast-align            \
		-Wconversion \
		-Wmissing-prototypes \
		-Woverloaded-virtual

# Mustn't use -Wcast-align with STL code (flood of warnings):
STLFRIENDLYWARNINGS = -W -Wall -Wpointer-arith \
		-Wcast-qual \
		-Wconversion \
		-Wmissing-prototypes \
		-Woverloaded-virtual -Wno-deprecated
endif
ifdef USE_SUNWORKSHOP
BASICWARNINGS = +w 
COMMONWARNINGS = +w 
USEFULWARNINGS = +w 
# +w2 as well
STLFRIENDLYWARNINGS = +w 
endif

#don't inline -- for the files that won't emit template code
INLINE_DEFINES = 

# flags for normal (non-kludge) files, with common warnings
CFLAGS		= $(IFLAGS) $(ARCH_DEF) $(OPT_FLAG) $(COMMON_WARNINGS)
CXXFLAGS	= $(IFLAGS) $(ARCH_DEF) $(OPT_FLAG) $(COMMON_WARNINGS)

# flags for kludge files, won't have warnings generated
KFLAGS          = $(IFLAGS) $(ARCH_DEF) $(BASICWARNINGS)

ifdef USING_PURIFY
CFLAGS		+= -DPURE_BUILD
CXXFLAGS	+= -DPURE_BUILD
endif

ifdef USES_MT_THREAD
CFLAGS		+= -DMT_THREAD
CXXFLAGS	+= -DMT_THREAD
endif

ifdef USES_LIBDYNINSTRT_SO
CFLAGS		+= -DUSES_LIBDYNINSTRT_SO
CXXFLAGS	+= -DUSES_LIBDYNINSTRT_SO
endif

ifdef USES_DYNAMIC_INF_HEAP
CFLAGS		+= -DUSES_DYNAMIC_INF_HEAP
CXXFLAGS	+= -DUSES_DYNAMIC_INF_HEAP
endif

ifndef OPT_FLAG
KFLAGS		+= -g
ifndef DEBUG_FLAG
DEBUG_FLAG = -g
endif
endif

ifeq ($(DEBUG_FLAG),none)
DEBUG_FLAG =
endif

ifdef DEBUG_FLAG
CFLAGS   += $(DEBUG_FLAG)
CXXFLAGS += $(DEBUG_FLAG)
KFLAGS   += $(DEBUG_FLAG)
endif

# flags for template files, don't define external template flags
# -g is optional in this case -- should be defined at module level
TFLAGS          = $(IFLAGS) $(TEMP_INLINE_DEFINES) $(ARCH_DEF) $(OPT_FLAG) $(BASICWARNINGS)

ifdef USES_MT_THREAD
TFLAGS		+= -DMT_THREAD
endif

ifdef USES_LIBDYNINSTRT_SO
TFLAGS		+= -DUSES_LIBDYNINSTRT_SO
endif

ifdef DO_INLINE_ALL
CFLAGS	       += $(ALL_INLINE_DEFINES)
CXXFLAGS       += $(ALL_INLINE_DEFINES)
endif


## Set IGEN to point to $(TO_PD_CORE)/igen/$(PLATFORM)/igen, if it exists,
## else set it to $(BACKUP_CORE)/../bin/$(PLATFORM)/igen, if it exists,
## else set it to just "igen" (i.e. assume it's in the user's path)
IGEN = $(shell if [ -f $(TO_PD_CORE)/igen/$(PLATFORM)/igen ]; then echo $(TO_PD_CORE)/igen/$(PLATFORM)/igen; else if [ -f $(BACKUP_CORE)/../bin/$(PLATFORM)/igen ]; then echo $(BACKUP_CORE)/../bin/$(PLATFORM)/igen; else echo igen; fi; fi)

ifdef NO_IMPLICIT_TEMPLATES
CFLAGS		+= -fno-implicit-templates
CXXFLAGS	+= -fno-implicit-templates
KFLAGS		+= -fno-implicit-templates
TFLAGS		+= -fno-implicit-templates
endif

ifndef INSTANTIATE_TEMPLATES
ifndef NO_IMPLICIT_TEMPLATES
# -fexternal-templates and -Dexternal_templates should both be used or
# neither should be used; add them to CFLAGS, CXXFLAGS, and KFLAGS
# (but not to TFLAGS).
#
CFLAGS		+=  -fexternal-templates -Dexternal_templates
CXXFLAGS	+=  -fexternal-templates -Dexternal_templates
KFLAGS		+=  -fexternal-templates -Dexternal_templates
endif
endif

# ***** EXTERNAL SOFTWARE CONFIGURATION *****

ifdef USES_TCLTK
# NOTE: After linking, do an "ldd", and make sure the expected version
# of X11 (R4 vs. R6) is being used (and not both!)
ifndef TCLTK_DIR
$(error error: TCLTK_DIR is not set.  Please set in make.config.local)
endif 

ifdef USE_TCL83
TCLTK_LIBVER_ID = 8.3
else
TCLTK_LIBVER_ID = 8.4
endif

ifdef DISTRIBUTION
TCLTK_LIBS	+= -Wl,-Bstatic
endif

TCLTK_LIBS	+= -ltcl$(TCLTK_LIBVER_ID) -ltk$(TCLTK_LIBVER_ID)

ifdef DISTRIBUTION
TCLTK_LIBS	+= -Wl,-Bdynamic
endif

# Set TCL2C to $(TO_CORE)/tclStuff/tcl2c, if it exists, else
# set it to $(BACKUP_CORE)/tclStuff/tcl2c, if it exists, else
# set it to just tcl2c (i.e. assume it's in the user's shell path)
TCL2C		= $(shell if [ -f $(TO_CORE)/tclStuff/tcl2c ]; then echo $(TO_CORE)/tclStuff/tcl2c; else if [ -f $(BACKUP_CORE)/tclStuff/tcl2c ]; then echo $(BACKUP_CORE)/tclStuff/tcl2c; else echo tcl2c; fi; fi )
TCL2C_GEN_SRCS	= tcl2c.C

# set TCLTK_INCLUDES to $(TCLTK_DIR)/include
TCLTK_INCLUDES = $(TCLTK_DIR)/include

IFLAGS		+= $(patsubst %,-I%,$(TCLTK_INCLUDES))
ifeq ($(TCLTK_LIBVER_ID),8.3)
CFLAGS      += -DTCLCONST=""
CXXFLAGS    += -DTCLCONST=""
KFLAGS      += -DTCLCONST=""
TFLAGS      += -DTCLCONST=""
else
CFLAGS	    += -DTCLCONST=const
CXXFLAGS    += -DTCLCONST=const
KFLAGS      += -DTCLCONST=const
TFLAGS      += -DTCLCONST=const
endif

ifdef CROSSCOMPILER
LIBDIR		+= $(patsubst %,-L%/rs_aix41/lib,$(TCLTK_DIR))
else
LIBDIR          += $(patsubst %,-L%/lib,$(TCLTK_DIR))
endif

endif # USES_TCLTK

ifdef CROSSCOMPILER
FLEX_DIR	= /s/flex/rs_aix41/lib
LIBDIR		+= -L/p/sp2/gcc/lib 
endif

ifdef USES_X11

ifdef DISTRIBUTION
ifdef SPARC_SOLARIS
X11_LIB         = -Wl,-Bstatic -lX11 -lXext -Wl,-Bdynamic
else
X11_LIB         = -Wl,-Bstatic -lX11 -Wl,-Bdynamic
endif
else
X11_LIB         = -lX11
endif

X11_DIR		= /usr/openwin
#X11_DIR		= /usr/X11R6
#X11_DIR		= /s/XFree86-3.3.5

X11_LIBDIR	= $(X11_DIR)/lib

# /usr/openwin/include has old K & R C prototypes for X11.h and this chokes
# on g++ 2.95.  So, we #include R6, though we still want to link with R4
# (and thus we link with /usr/openwin/include)
X11_INCLUDEDIR	= /usr/X11R6/include
#X11_INCLUDEDIR	= $(X11_DIR)/include

ifdef SPARC_SOLARIS
CFLAGS		+= -I$(X11_INCLUDEDIR)
CXXFLAGS	+= -I$(X11_INCLUDEDIR)
TFLAGS		+= -I$(X11_INCLUDEDIR)
LIBDIR		+= -L$(X11_LIBDIR)
VPATH		+= $(X11_LIBDIR)/lib
endif

ifeq ($(PLATFORM),i386-unknown-solaris2.5)
CFLAGS		+= -I$(X11_INCLUDEDIR)
CXXFLAGS	+= -I$(X11_INCLUDEDIR)
TFLAGS		+= -I$(X11_INCLUDEDIR)
LIBDIR		+= -L$(X11_LIBDIR)
VPATH		+= $(X11_LIBDIR)/lib
endif

ifdef I386_LINUX
X11DIR		= /usr/X11R6
CFLAGS          += -I$(X11DIR)/include/X11
CXXFLAGS        += -I$(X11DIR)/include/X11
TFLAGS          += -I$(X11DIR)/include/X11
LIBDIR          += -L$(X11DIR)/lib
VPATH           += $(X11DIR)/include/X11
endif

endif # USES_X11


ifdef USES_ELF

ELF_LIB         = -lelf

ifdef DISTRIBUTION

ifdef I386_LINUX
ELF_LIB         = -Wl,-Bstatic -lelf -Wl,-Bdynamic
LIBDIR  += -L/p/paradyn/kerninst/development/mjbrim/software/libelf-0.8.5/lib
endif

endif # DISTRIBUTION

endif # USES_ELF

# ************ Generic directives for making distributions **************

ifdef DISTRIBUTION

LDFLAGS  += -L. -Wl,-Bstatic -lstdc++ -Wl,-Bdynamic -static-libgcc

endif
